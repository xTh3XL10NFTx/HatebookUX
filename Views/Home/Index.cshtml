@model HatebookUX.Models.Message

@using Microsoft.AspNetCore.Http

@{
    ViewData["Title"] = "Home Page";

    var successMessage = TempData["SuccessMessage"] as string;
    var errorMessage = TempData["ErrorMessage"] as string;
}
@if (User.Identity.IsAuthenticated)
{
    <p>Welcome, @User.Identity.Name!</p>
}
@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success">@successMessage</div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

<style>
    #chat-icon {
        position: fixed;
        bottom: 20px;
        right: 20px;
        width: 60px;
        height: 60px;
        border-radius: 50%;
        display: flex;
        justify-content: center;
        align-items: center;
        cursor: pointer;
        z-index: 9999;
    }

    #chat-window {
        position: fixed;
        bottom: 20px;
        right: 0;
        width: 300px;
        height: 400px;
        border-radius: 8px;
        display: flex;
        flex-direction: column;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.15);
        transition: transform 0.3s ease-in-out;
        z-index: 9999;
    }

        #chat-window.closed {
            transform: translateX(100%);
        }

    #chat-header {
        display: flex;
        align-items: center;
        padding: 10px;
    }

        #chat-header .material-icons {
            margin-right: 10px;
            cursor: pointer;
        }

    #chat-body {
        flex-grow: 1;
        padding: 10px;
        overflow-y: auto;
    }

    #chat-close {
        border-radius: 50%;
    }

    #chat-footer {
        padding: 10px;
        display: flex;
        align-items: center;
    }

    #chat-input {
        flex-grow: 1;
        padding: 5px;
        border: none;
        border-radius: 4px;
    }

    #chat-send {
        margin-left: 10px;
        padding: 6px 12px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    #chat-body::-webkit-scrollbar {
        width: 10px; /* Width of the scrollbar */
    }

    #chat-body::-webkit-scrollbar-track {
        background-color: var(--bs-dark); /* Color of the track */
    }

    #chat-body::-webkit-scrollbar-thumb {
        background-color: var(--bs-primary); /* Color of the thumb */
        border-radius: 5px; /* Rounded corners of the thumb */
    }

        #chat-body::-webkit-scrollbar-thumb:hover {
            background-color: var(--bs-secondary); /* Color of the thumb on hover */
        }

    .message {
        margin-bottom: 10px;
        text-align: left;
    }

        .message strong {
            font-weight: bold;
        }

        .message.sent {
            text-align: right;
        }

            .message.sent strong {
                color: var(--bs-warning); /* Color for the logged-in user's name */
            }
</style>

<div class="text-center">
    <h1 class="display-4">Welcome</h1>


    <figure class="text-center">
        <blockquote class="blockquote">
            <p class="mb-0">Please, log in or register in order to use our website!</p>

        </blockquote>
        <figcaption class="blockquote-footer">
            From <cite title="Source Title">Ivelin Tanev, Vasil Gulev</cite>
        </figcaption>
    </figure>

    @if (User.Identity.IsAuthenticated)
    {
        <div id="chat-icon" class="btn btn-secondary">
            <span class="material-icons">Chat</span>
        </div>

        <div id="chat-window" class="closed card bg-secondary">
            <div id="chat-header" class="d-flex justify-content-between align-items-center card-header">
                <span>New message</span>
                <span id="chat-close" class="btn-close"></span>
            </div>
            <div id="chat-body" class="bg-dark"></div>
            <div id="chat-footer" class="bg-dark">
                <input type="hidden" class="form-control" id="chat-username" value="@User.Identity.Name" readonly />
                <input type="text" class="form-control" id="chat-input" placeholder="Type your message" />

                <button type="submit" id="chat-send" class="btn btn-danger">Send</button>
            </div>
        </div>
    }

</div>


<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.11/signalr.min.js"></script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const chatWindow = document.getElementById("chat-window");
        const chatBody = document.getElementById("chat-body");
        const chatInput = document.getElementById("chat-input");
        const chatSend = document.getElementById("chat-send");
        const chatUsernameInput = document.getElementById("chat-username");
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("https://localhost:7288/chathub")
            .build();

        let chatOpen = false;

        // Function to toggle the chat window
        function toggleChatWindow() {
            chatOpen = !chatOpen;
            chatWindow.classList.toggle("closed", !chatOpen);
        }

        // Event listeners
        document.getElementById("chat-icon").addEventListener("click", toggleChatWindow);
        document.getElementById("chat-close").addEventListener("click", toggleChatWindow);

        chatSend.addEventListener("click", function (event) {
            const message = chatInput.value;
            const username = chatUsernameInput.value;

            if (username && message) {
                chatInput.value = "";

                connection.invoke("SendMessage", username, message)
                    .catch(function (error) {
                        console.error("Error sending message through SignalR: " + error);
                    });
            }
        });



        chatInput.addEventListener("keypress", function (event) {
            if (event.key === "Enter") {
                event.preventDefault();

                const message = chatInput.value;
                const username = chatUsernameInput.value;

                if (username && message) {
                    chatInput.value = "";

                    connection.invoke("SendMessage", username, message)
                        .catch(function (error) {
                            console.error("Error sending message through SignalR: " + error);
                        });
                }
            }
        });

        // Event handler for receiving messages
        connection.on("ReceiveMessage", function (user, message) {
            if (user && message) {
                appendMessage(user, message);
            }
        });

        connection.start().then(function () {
            console.log("SignalR connection started");
        }).catch(function (error) {
            console.error("Error starting SignalR connection: " + error);
        }).catch(function (error) {
            console.error("Error sending message through SignalR:", error);
        });

        connection.invoke("SendMessage", username, message)
            .catch(function (error) {
                console.error("Error sending message through SignalR: " + error);
            });

        function appendMessage(sender, message) {
            const messageElement = document.createElement("div");
            messageElement.classList.add("message");

            if (sender === chatUsernameInput.value) {
                messageElement.classList.add("sent");
                messageElement.innerHTML = `<strong>${sender}:</strong> ${message}`;
            } else {
                messageElement.innerHTML = `<strong>${sender}:</strong> ${message}`;
            }

            chatBody.appendChild(messageElement);
        }

        connection.onclose((error) => {
            console.error("SignalR connection closed:", error);
        });
    });
</script>